tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: initial
  template_version: 2.0.0-SNAPSHOT
  template_author: alien4cloud


description: |
  A nodecellar topology template composing of:
    - 1 ContainerUnit hosting 2 nocellars containers
    - 2 Mongo containers with anti affinity policy.

imports:
  - alien-base-types:2.0.0-SM3
  - docker-types:2.0.0-SM3
  - tosca-normative-types:1.0.0-ALIEN20SM3
  - docker-draft.sandbox.samples:2.0.0-SM3

topology_template:
  node_templates:
    NodecellarDeployment:
      type: org.alien4cloud.extended.container.types.ContainerDeploymentUnit
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    Nodecellar2Container:
      type: org.alien4cloud.extended.container.types.ContainerRuntime
      requirements:
        - hostedOnContainerDeploymentUnitHost:
            type_requirement: host
            node: NodecellarDeployment
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
    Nodecellar1Container:
      type: org.alien4cloud.extended.container.types.ContainerRuntime
      requirements:
        - hostedOnContainerDeploymentUnitHost:
            type_requirement: host
            node: NodecellarDeployment
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
    Nodecellar2:
      type: org.alien4cloud.nodes.Application.Docker.Nodecellar
      properties:
        docker_run_cmd: "cd /nodecellar && nodejs server.js"
        docker_env_vars:
          LOG_LEVEL: ""
        cpu_share: 1.0
        mem_share: "128 MB"
      requirements:
        - connectsToMongo2Mongo_db:
            type_requirement: mongo_db
            node: Mongo2
            capability: org.alien4cloud.capabilities.endpoint.docker.Mongo
            relationship: tosca.relationships.ConnectsTo
        - hostedOnContainerRuntimeNodecellar2ContainerHost:
            type_requirement: host
            node: Nodecellar2Container
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        nodecellar_app:
          properties:
            docker_bridge_port_mapping: 0
            port: 3000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    Nodecellar1:
      type: org.alien4cloud.nodes.Application.Docker.Nodecellar
      properties:
        docker_run_cmd: "cd /nodecellar && nodejs server.js"
        docker_env_vars:
          LOG_LEVEL: ""
        cpu_share: 1.0
        mem_share: "128 MB"
      requirements:
        - hostedOnContainerRuntimeNodecellar1ContainerHost:
            type_requirement: host
            node: Nodecellar1Container
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
        - connectsToMongo1Mongo_db:
            type_requirement: mongo_db
            node: Mongo1
            capability: org.alien4cloud.capabilities.endpoint.docker.Mongo
            relationship: tosca.relationships.ConnectsTo
      capabilities:
        nodecellar_app:
          properties:
            docker_bridge_port_mapping: 0
            port: 3000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    Mongo1Container:
      type: org.alien4cloud.extended.container.types.ContainerRuntime
    Mongo2Container:
      type: org.alien4cloud.extended.container.types.ContainerRuntime
    Mongo2:
      type: org.alien4cloud.nodes.Application.Docker.Mongo
      properties:
        cpu_share: 1.0
        mem_share: "128 MB"
      requirements:
        - hostedOnContainerRuntimeMongo2ContainerHost:
            type_requirement: host
            node: Mongo2Container
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        mongo_db:
          properties:
            docker_bridge_port_mapping: 0
            port: 27017
            api_version: v1
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    Mongo1:
      type: org.alien4cloud.nodes.Application.Docker.Mongo
      properties:
        cpu_share: 1.0
        mem_share: "128 MB"
      requirements:
        - hostedOnContainerRuntimeMongo1ContainerHost:
            type_requirement: host
            node: Mongo1Container
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime
      capabilities:
        mongo_db:
          properties:
            docker_bridge_port_mapping: 0
            port: 27017
            api_version: v1
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
  policies:
    - AntiAffinity:
        type: org.alien4cloud.policies.AntiAffinity
        targets: [ Mongo2Container, Mongo1Container ]
        properties:
          level: host
